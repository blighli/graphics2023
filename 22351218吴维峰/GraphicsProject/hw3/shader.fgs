#version 330 core
out vec4 FragColor;

struct Light {
    vec3 position;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

#define NR_POINT_LIGHTS 4
#define SHININESS 32

in vec3 FragPos;  
in vec3 Normal;  
in vec2 TexCoords;
  
uniform vec3 viewPos;
uniform sampler2D texture1;
uniform Light lights[NR_POINT_LIGHTS];
uniform int lightNum;

void main()
{
    FragColor = vec4(0, 0, 0, 0);
    for (int i = 0; i < lightNum; i++)
    {
        Light light = lights[i];
        // ambient
        vec3 ambient = light.ambient * texture(texture1, TexCoords).rgb;
  	
        // diffuse 
        vec3 norm = normalize(Normal);
        vec3 lightDir = normalize(light.position - FragPos);
        float diff = max(dot(norm, lightDir), 0.0);
        vec3 diffuse = light.diffuse * diff * texture(texture1, TexCoords).rgb;  
    
        // specular
        vec3 viewDir = normalize(viewPos - FragPos);
        vec3 reflectDir = reflect(-lightDir, norm);  
        float spec = max(pow(dot(viewDir, reflectDir), SHININESS), 0.0);
        vec3 specular = light.specular * spec;  
        
        FragColor.xyz += ambient + diffuse + specular;
        //vec3 result = ambient + diffuse + specular;
        //FragColor += vec4(result, 1.0);
    }

    //FragColor = vec4(result, 1.0);
}
